## Lab 4.1 mathIfs ##

**Sample Data:**
10 20
20 10
20 20
10 10
0 1
2 0

**Sample Output:**
10
30
400
100
1
2

```
**Main.java**
MathIfs test = new MathIfs();
      
System.out.println( test.doMath( 10, 20) );  
System.out.println( test.doMath( 20, 10) ); 
System.out.println( test.doMath( 20, 20) );
System.out.println( test.doMath( 10, 10) ); 
System.out.println( test.doMath( 0, 1) ); 
System.out.println( test.doMath( 2, 0 ) );

**MathIfs.java**
if (a > b) 
{
  return a - b; 
}
else if (b > a)
{
  return b + a; 
}
else if (a == b)
{
  return a * b; 
}
else if (a == 0)
{
  return b * 2; 
}
else if (b == 0)
{
  return a * 2; 
}
else
{
  return 0; 
}
```

## Lab 4.3 StringIfsFunhouse ##

**No Sample Output**

```
/*
   * Part 1: sameFirstLetter
   * Given two strings, return 1 if the first letter of
   * each string is the same.
   * Otherwise, return -1.
   */
  public int sameFirstLetter(String a, String b) 
  {
    return (a.charAt(0) == b.charAt(0)) ? 1 : -1; 
  }

  /*
   * Part 2: vowelOrDigit
   * Return true if the first character is a vowel or a digit.
   * Otherwise, return false
   */
  public boolean vowelOrDigit(String str) 
  {
    // Check if first character of str is vowel/digit
    String vow_dig = "AEIOUaeiou123456789";
    return (vow_dig.indexOf(str.charAt(0)) != -1) ? true : false; 
  }

  /*
   * Part 3: firstLastVowel
   * Return "yes" if the first or last letter
   * of the string is a vowel.
   * Otherwise, return no.
   */
  public String firstLastVowel(String str) 
  {
    // Check if first character or last character of str is vowel
    String vowels = "AEIUOaeiuo";
    return (vowels.indexOf(str.charAt(0)) != -1 || vowels.indexOf(str.charAt(str.length() - 1)) != -1) ? "yes" : "no"; 
  }

  /*
   * Part 4: firstRepeats
   * Return true if the first letter of a given string repeats
   * anywhere else in the string
   * Return false, otherwise.
   * (Do not use any methods we have not learned in class)
   */
  public boolean firstRepeats(String a)
   {
     return a.indexOf(a.charAt(0), 1) != -1; 
   }
   ```
## Lab 4.4 Social Security ##

**Sample Output:**
// add up numeric pieces 
SS# 456-56-2345 has a total of 2857
SS# 121-12-1200 has a total of 1333
SS# 102-2-1212 has a total of -1
SS# 000-00-0000 has a total of 0
SS# 000-00-000 has a total of -1
SS# 175-99 5656 has a total of -1
```
**Main.java**
 System.out.println("\n");
 ss.chopAndAdd("456-56-2345");
 System.out.println(ss);
    
 System.out.println("\n");
 ss.chopAndAdd("121-12-1200");  
 System.out.println(ss);

 System.out.println("\n");
 ss.chopAndAdd("102-2-1212");
 System.out.println(ss);

 System.out.println("\n");
 ss.chopAndAdd("000-00-0000");
 System.out.println(ss);

 System.out.println("\n");
 ss.chopAndAdd("000-00-000");
 System.out.println(ss);
    
 System.out.println("\n");
 ss.chopAndAdd("175-99 5656");
 System.out.println(ss);

**Social.java**
 private int total;
   private String socialNum;
   
   public Social(String a)
   {
      //your code here
     total = 0;  
     socialNum = a;
   }
   
   //complete the chopAndAdd method (see instructions)
   //do not change the method header
   //make sure you assign total the value of the sum or -1
	public void chopAndAdd(String a)
	{
    socialNum = a;
    if (socialNum.length() != 11 || socialNum.indexOf('-') != 3 || socialNum.lastIndexOf('-') != 6)
    {
      total = -1; 
    }
    else
    {
      String first = socialNum.substring(0, socialNum.indexOf('-'));
      String second = socialNum.substring(socialNum.indexOf('-') + 1, socialNum.lastIndexOf('-'));  
      String third = socialNum.substring(socialNum.lastIndexOf('-') + 1, socialNum.length());

      total = Integer.parseInt(first) + Integer.parseInt(second) + Integer.parseInt(third);  
    }
	}
   
   //complete the toString method (See sample output)
	public String toString()
	{
		return "SS# " + socialNum + " has a total of " + total; 
	}
```

## Lab 4.5 StringChecker ##

**Sample Data:**
chicken
alligator
COMPUTER SCIENCE IS THE BEST!

**Sample Output:**
looking for c true
looking for ch true
looking for x false
chicken

looking for g true
looking for all true
looking for gater false
alligator

looking for U true
looking for COMP SCI false
looking for SCIENCE true
COMPUTER SCIENCE IS THE BEST!
```
**Main.java**
StringChecker demo = new StringChecker("chicken"); 
System.out.println("looking for c "+demo.findLetter('c')); //true
System.out.println("looking for ch "+demo.findSubString("ch")); //true
System.out.println("looking for x "+demo.findSubString("x")); //false
System.out.println(demo); //chicken

StringChecker demo1 = new StringChecker("alligator");
System.out.println("looking for g "+demo1.findLetter('g')); //true
System.out.println("looking for all "+demo1.findSubString("all")); //true
System.out.println("looking for gater "+demo1.findSubString("gater"));//false
System.out.println(demo1); //alligator

StringChecker demo2 = new StringChecker("COMPUTER SCIENCE IS THE BEST!");
System.out.println("looking for U "+demo2.findLetter('U')); //true
System.out.println("looking for COMP SCI "+demo2.findSubString("COMP SCI"));//false
System.out.println("looking for SCIENCE "+demo2.findSubString("SCIENCE"));//true
System.out.println(demo2); //COMPUTER SCIENCE IS THE BEST!

**StringChecker.java**
private String word;//global variable

	public StringChecker() //default constructor method
	{
      word = ""; //initializing gobal variable to default value
	}

	public StringChecker(String s) //non-default constructor method
	{
      word = s; //initializing global variable to value stored in local variable s
	}

   public boolean findLetter(char c)
	{
      //your code here
      return (word.indexOf(c) != -1); 
  }

	public boolean findSubString(String s)
	{
		// your code here
    return (word.indexOf(s) != -1); 
	}

 	public String toString() //method to help print global variables 
 	{
 		return word+ "\n\n";
	}
```
